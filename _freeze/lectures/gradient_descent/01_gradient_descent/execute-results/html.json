{
  "hash": "2f29aff4ae64ea95e17fbde179af8608",
  "result": {
    "markdown": "---\ntitle: \"Gradient Descent\"\neditor: visual\n---\n\n\n## Getting there by little steps\n\n\n::: {.cell}\n\n:::\n\n\nWhat if wanted to convert inches to centimeters, but didn't know that the formula is inches \\* 2.54? But what we *did* have was the following table of belt sizes from the Gap!\n\n| Waist Size | Belt Length (in) | Belt Length (cm) |\n|-----------:|-----------------:|-----------------:|\n|         28 |             30.5 |               77 |\n|         30 |             32.5 |               83 |\n|         32 |             34.5 |               88 |\n|         34 |             36.5 |               93 |\n|         36 |             38.5 |               98 |\n|         38 |             40.5 |              103 |\n|         40 |             42.5 |              108 |\n|         42 |             44.5 |              113 |\n|         44 |             46.5 |              118 |\n|         46 |             48.5 |              123 |\n\nWhat we could do is *guess* the multiplier, and see how wrong it is.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nbelt_in = np.array([30.5, 32.5, 34.5, 36.5, 38.5, 40.5, 42.5, 44.5, 46.5, 48.5])\nbelt_cm = np.array([77, 83, 88, 93, 98, 103, 108, 113, 118, 123])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmultiplier_guess = 1.5\ncm_guess = belt_in * multiplier_guess\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# If our guess was right, this should all be 0\ncm_guess - belt_cm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([-31.25, -34.25, -36.25, -38.25, -40.25, -42.25, -44.25, -46.25,\n       -48.25, -50.25])\n```\n:::\n:::\n\n\nOur guess wasn't a great guess. With this multiplier, our guesses are all too small. Let's describe how bad our guess was with one number, and call it the \"loss.\" The usual loss function for data like this is the Mean Squared Error.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef mse(actual, guess):\n  \"\"\"\n    Given the actual target outcomes and the outcomes we guessed,\n    calculate the mean squared error.\n  \"\"\"\n  error = actual-guess\n  squared_error = np.power(error, 2)\n  mean_squared_error = np.mean(squared_error)\n  return(mean_squared_error)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmse(belt_cm, cm_guess)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1728.2125\n```\n:::\n:::\n\n\nIf we made our multiplier guess a little closer to what it ought to be, though, our mean squared error, or loss, should get smaller.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmultiplier_guess += 0.2\ncm_guess = belt_in * multiplier_guess\nmse(belt_cm, cm_guess)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1128.2125\n```\n:::\n:::\n\n\nOne thing we could try doing is make a long list of possible multipliers, and try them all to see which one has the smallest loss. This is also known as a \"grid search\". I'll have to re-write the loss function to calculate the loss for specific multipliers\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# This gives us 50 evenly spaced numbers between 0 and 50\npossible_mults = np.linspace(start = 0., stop = 5., num = 50)\n\ndef mse_loss(multiplier, inches, cm):\n  \"\"\"\n    given a multiplier, and a set of traning data,\n    (inches and their equivalent centimeters), return the \n    mean squared error obtained by using the given multiplier\n  \"\"\"\n  cm_guess = inches * multiplier\n  loss = mse(cm_guess, cm)\n  return(loss)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nlosses = np.array([mse_loss(m, belt_in, belt_cm) for m in possible_mults])\n```\n:::\n\n\nIt's probably best to visualize the relationship between the multiplier and the loss in a graph.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01_gradient_descent_files/figure-html/unnamed-chunk-11-1.png){width=480}\n:::\n:::\n\n\nIf we get the index of the smallest loss and get the associated multiplier, we can see that we're not too far off!\n\n\n::: {.cell}\n\n```{.python .cell-code}\npossible_mults[losses.argmin()]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.5510204081632653\n```\n:::\n:::\n\n\n### Why not always just do grid search?\n\nOne thing that is going to remain the same no matter how complicated the models get is the measure of how well they've done, or the loss, is going to get boiled down to one number. But in real modelling situations, or neural networks, the number of *parameters* is going to get huge. Here we have only one parameter, but if we had even just 5 parameters, and tried doing a grid search over 50 evenly spaced values of each parameter, the number of possible combinations of parameter values will get intractable.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nf\"{(5 ** 50):,}\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'88,817,841,970,012,523,233,890,533,447,265,625'\n```\n:::\n:::\n\n\n### Without seeing the whole map, we can tell which way is the right direction.\n\nLet's look at the plot of our parameter vs the loss again:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01_gradient_descent_files/figure-html/unnamed-chunk-14-1.png){width=480}\n:::\n:::\n\n\nThere are a few really important features of this loss function:\n\n1.  As the estimate gets further away from the ideal value in either direction, the loss increases.\n2.  The increase is \"monotonic\", meaning it's not bumpy or sometime going up, sometimes going down.\n3.  The further away the guess gets from the optimal value, the *steeper* the \"walls\" of the curve get.\n\nLet's say we were just these two point here, and we couldn't \"see\" the whole curve, but we knew features 1 through 3 were true. With that in hand, and information about how the loss function is calculated, we *can* get the *slope* of the function at each point (indicated by the arrows).\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01_gradient_descent_files/figure-html/unnamed-chunk-15-1.png){width=480}\n:::\n:::\n\n\nIf we were able to to update our parameter in a way that is proportional to the slope of the loss, then we would gradually get closer and closer to the optimal value. The updates would be very large at first, while the parameter values are far away from the optimal value, and then would start updating by smaller and smaller amounts as we home in on the optimal value because the slopes get shallower and shallower the closer we get.\n\nThe slope of the loss function at any given point is the **gradient**, and this process of gradually descending downwards is called **gradient descent**.\n\n## Gradient Descent\n\n\"But Joe!\" you exclaim, \"How *do* you calculate the slope of the loss for a single point without seeing the whole distribution?\"\n\nThe answer to that question used to be \"with calculus.\" But nowadays, people do it with \"autograd\" or \"autodiff\", which basically means \"we let the computer figure it out.\" There isn't autograd functionality in numpy, but there is in a closely related library called [Jax, which is being developed by Google](https://jax.readthedocs.io/en/latest/#). Jax has a module called `numpy` which is designed to operate exactly the same way as `numpy`.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport jax.numpy as jnp\nfrom jax import grad\n```\n:::\n\n\nI'm going to rewrite the inches to centimeter functions over again, this time making sure to use jax functions to ensure everything runs smoothly.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef inch_to_cm_jax(multiplier, inches):\n  \"\"\"\n    a function that converts inches to cm\n  \"\"\"\n  cm = jnp.dot(inches, multiplier)\n  return(cm)\n\ndef cm_loss_jax(multiplier, inches, cm):\n  \"\"\"\n    estimate the mismatch between the\n  \"\"\"\n  est = inch_to_cm_jax(multiplier, inches)\n  diff = est - cm\n  sq_err = jnp.power(diff, 2)\n  mean_sq_err = jnp.mean(sq_err)\n  return(mean_sq_err)\n\n```\n:::\n\n\nThen we pass the new loss function to a jax function called `grad()` to create a new gradient function.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncm_loss_grad_jax = grad(cm_loss_jax, argnums=0)\n```\n:::\n\n\nWhere `cm_loss_jax()` will give use the mean-squared error for a specific multiplier, `cm_loss_grad_jax()` will give us the *slope* for that multiplier, automatically.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(multiplier_guess)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.7\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# This is the mean-squared-error\nprint(cm_loss_jax(multiplier_guess, belt_in, belt_cm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1128.2124\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# This is the slope\nprint(cm_loss_grad_jax(multiplier_guess, belt_in, belt_cm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-2681.3499\n```\n:::\n:::\n\n\n## Learning Rates and \"Epochs\"\n\nNow we can write a for-loop to iteratively update out multiplier guess, changing it just a little bit proportional to the gradient. There are two \"hyper parameters\" we need to choose here.\n\n1.  The \"learning rate\". We can't go adding the gradient *itself* to the multiplier. The gradient right now is in the thousands, and we're trying to nudge 1.7 to 2.54. So, we pick a \"learning rate\", which is just a very small decimal to multiply the gradient by before we add it to the parameter. I'll say let's start at 1/100,000\n2.  The number of \"epochs.\" We need to decide how many for loops we're going to go through before we decide to call it and check on how the learning has gone. I'll say let's go for 1000.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlearning_rate = 1/100_000\nepochs = 1000\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# I want to be able to plot everything after, so I'm going to create collectors.\nepoch_list    = []\nparam_list    = []\nloss_list     = []\ngradient_list = []\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmultiplier_guess = 0.\nfor i in range(epochs):\n  # append the current epoch\n  epoch_list.append(i)\n  # append the current guess\n  param_list.append(multiplier_guess)\n  \n  loss = cm_loss_jax(multiplier_guess, belt_in, belt_cm)\n  loss_list.append(loss)\n  gradient = cm_loss_grad_jax(multiplier_guess, belt_in, belt_cm)\n  gradient_list.append(gradient)\n  \n  multiplier_guess += -(gradient * learning_rate)\n\nprint(f\"The final guess was {multiplier_guess:.3f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe final guess was 2.541\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](01_gradient_descent_files/figure-html/unnamed-chunk-27-1.png){width=768}\n:::\n:::\n\n\n## This will all work with more parameters\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nfrom palmerpenguins import load_penguins\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins = load_penguins()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nbill_length = np.array(penguins.dropna()[\"bill_length_mm\"])\nbody_mass = np.array(penguins.dropna()[\"body_mass_g\"])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nbill_length_z = (bill_length - bill_length.mean())/bill_length.std()\nbody_mass_z = (body_mass - body_mass.mean())/body_mass.std()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nbill_length_X = np.stack([np.ones(bill_length_z.size), bill_length_z], axis = 1)\nbill_length_X[0:10, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[ 1.        , -0.89604189],\n       [ 1.        , -0.82278787],\n       [ 1.        , -0.67627982],\n       [ 1.        , -1.33556603],\n       [ 1.        , -0.85941488],\n       [ 1.        , -0.9326689 ],\n       [ 1.        , -0.87772838],\n       [ 1.        , -0.52977177],\n       [ 1.        , -0.98760942],\n       [ 1.        , -1.72014965]])\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nparam_guess = np.array([0., 0.])\nmass_guess = np.dot(bill_length_X, param_guess)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nnp.mean(np.power(body_mass_z - mass_guess, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.0000000000000004\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndef fit_mass(params, X):\n  \"\"\"\n    Given some values and parameters\n    guess the outcome \n  \"\"\"\n  est = jnp.dot(X, params)\n  return(est)\n\ndef fit_loss(params, X, actual):\n  \"\"\"\n    Return the loss of the params\n  \"\"\"\n  est = fit_mass(params, X)\n  err = est - actual\n  sq_err = jnp.power(err, 2)\n  mse = jnp.mean(sq_err)\n  return(mse)\n\nfit_grad = grad(fit_loss, argnums=0)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfit_loss(param_guess, bill_length_X, body_mass_z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDeviceArray(1.0000001, dtype=float32)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfit_grad(param_guess, bill_length_X, body_mass_z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDeviceArray([ 1.3271347e-08, -1.1789025e+00], dtype=float32)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nepoch_list    = []\nparam_list    = []\nloss_list     = []\ngradient_list = []\n\n# I'm cheating starting out so close, just so this'll run quickly\nparam_guess = np.array([6., 4.])\nlearning_rate = 0.01\n#vt = np.array([0., 0.])\n\nfor i in range(1000):\n  # append the current epoch\n  epoch_list.append(i)\n  param_list.append(param_guess)\n  loss = fit_loss(param_guess, bill_length_X, body_mass_z)\n  loss_list.append(loss)\n  gradient = fit_grad(param_guess,  bill_length_X, body_mass_z)\n  gradient_list.append(gradient)\n \n  param_guess += -(gradient * learning_rate)\n \nprint(f\"Final param guess was {param_guess}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFinal param guess was [1.0582281e-08 5.8945251e-01]\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nparam_df %>%\n  slice(1:500) %>%\n  ggplot(aes(group = epoch)) +\n    geom_point(data = penguins, \n               aes(x = bill_length_z, y = body_mass_z),\n               group = NA)+\n    geom_abline(aes(slope = slope, intercept = intercept, color = loss)) +\n    theme(text = element_text(family = \"serif\", size = 16))+\n    transition_states(states = epoch)\n```\n\n::: {.cell-output-display}\n![](01_gradient_descent_files/figure-html/unnamed-chunk-42-1.gif)\n:::\n:::\n\n\n## Even more complex\n\n\n::: {.cell}\n\n```{.python .cell-code}\nbody_mass = jnp.array(penguins.dropna()[\"body_mass_g\"])\nbill_length = jnp.array(penguins.dropna()[\"bill_length_mm\"])\nbill_depth = jnp.array(penguins.dropna()[\"bill_depth_mm\"])\nflipper_length = jnp.array(penguins.dropna()[\"flipper_length_mm\"])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nbody_mass_z = (body_mass-body_mass.mean())/body_mass.std()\nbill_length_z = (bill_length-bill_length.mean())/bill_length.std()\nbill_depth_z = (bill_depth-bill_depth.mean())/bill_depth.std()\nflipper_length_z = (flipper_length-flipper_length.mean())/flipper_length.std()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndata = jnp.vstack([bill_length_z, bill_depth_z, flipper_length_z])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom jax import random\nfrom jax.nn import relu\n\nkey = random.PRNGKey(42)\nsubkeys = random.split(key, 3)\n\nlayer_1 = random.uniform(key = subkeys[0], shape = (3,5))\nlayer_2 = random.uniform(key = subkeys[1], shape = (5,5))\nlayer_3 = random.uniform(key = subkeys[1], shape = (5,1))\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n#jnp.dot(relu(jnp.dot(data.T, layer_1)), layer_2).squeeze()\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndef estimate_mass(layers, data):\n  l0_out = jnp.dot(data.T, layers[0])\n  #l0_act = relu(l0_out)\n  l1_out = jnp.dot(l0_out, layers[1])\n  #l1_act = relu(l1_out)\n  estimate = jnp.dot(l1_out, layers[2])\n  #estimate = jnp.dot(jnp.dot(jnp.dot(data.T, layers[0]), layers[1]), layers[2])\n  return(estimate)\n\ndef mass_loss(layers, data, body_mass_z):\n  estimate = estimate_mass(layers, data)\n  err = estimate.squeeze() - body_mass_z\n  sq_err = jnp.power(err, 2)\n  mean_sq_err = sq_err.mean()\n  return(mean_sq_err)\n\nmass_grad = grad(mass_loss, argnums = 0)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nest_list = []\nloss_list = []\n\nkey = random.PRNGKey(42)\nsubkeys = random.split(key, 3)\n\nlayer_1 = random.uniform(key = subkeys[0], shape = (3,5))\nlayer_2 = random.uniform(key = subkeys[1], shape = (5,5))\nlayer_3 = random.uniform(key = subkeys[2], shape = (5,1))\n\nlearning_rate = 0.001\nfor i in range(1000):\n  est = estimate_mass((layer_1, layer_2, layer_3), data)\n  loss = mass_loss((layer_1, layer_2, layer_3), data, body_mass_z)\n  est_list.append(est)\n  loss_list.append(loss)\n  \n  gradient = mass_grad((layer_1, layer_2, layer_3), data, body_mass_z)\n  layer_1 += -(gradient[0] * learning_rate)\n  layer_2 += -(gradient[1] * learning_rate)\n  layer_3 += -(gradient[2] * learning_rate)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nloss_arr = np.array(loss_list)\nest_arr = np.array(est_list)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(py$est_arr) %>%\n  mutate(epoch = 1:n()) %>%\n  pivot_longer(starts_with(\"X\")) -> fits\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(gganimate)\npenguins %>%\n  drop_na() %>%\n  mutate(body_mass_z = scale(body_mass_g)) %>%\n  select(body_mass_z, species) %>%\n  mutate(name = paste0(\"X\", 1:333)) -> real_data\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfits %>%\n  left_join(real_data) %>%\n  filter(epoch %% 5 == 0) %>%\n  ggplot(aes(body_mass_z, value))+\n    geom_abline(intercept = 0, slope = 1, color = \"grey\")+\n    geom_point(aes(color = species)) +\n    theme(text = element_text(family = \"serif\", size = 16))+\n    scale_color_bright()+\n    transition_states(states = epoch)\n```\n\n::: {.cell-output-display}\n![](01_gradient_descent_files/figure-html/unnamed-chunk-53-1.gif)\n:::\n:::\n\n\n## Categorical prediction\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom jax.nn import one_hot, softmax\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nunique_species = set(penguins.dropna()[\"species\"])\nspecies_to_index = {s:idx for idx, s in enumerate(unique_species)}\nspecies_index = np.array([species_to_index[s] for s in penguins.dropna()[\"species\"]])\nspecies_arr = jnp.array(species_index)\nspecies_one_hot = one_hot(species_arr, 3)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndata = jnp.vstack([bill_length_z, bill_depth_z, flipper_length_z, body_mass_z])\ndata_idx = np.array(list(range(data.shape[1])))\nn_train = int(np.floor(data.shape[1] * 0.8))\ntrain_idx = np.random.choice(list(range(data.shape[1])), size = n_train)\ntest_idx = [x for x in list(range(data.shape[1])) if not x in train_idx]\n\ndata_train = data[:, train_idx]\ndata_test = data[:, test_idx]\n\nlabel_train = species_one_hot[train_idx,]\nlabel_test = species_one_hot[test_idx,]\n\nspecies_index_train = species_index[train_idx]\nspecies_index_test = species_index[test_idx]\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nlabel_train.shape\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(266, 3)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndef estimate_species(layers, biases, data):\n  l0_out = jnp.dot(data.T, layers[0]) + biases[0]\n  l0_act = relu(l0_out)\n  l1_out = jnp.dot(l0_out, layers[1]) + biases[1]\n  l1_act = relu(l1_out)\n  l2_out = jnp.dot(l1_out, layers[2]) + biases[2]\n  estimate = softmax(l2_out, axis = -1)\n  #estimate = jnp.dot(jnp.dot(jnp.dot(data.T, layers[0]), layers[1]), layers[2])\n  return(estimate)\n\ndef estimate_loss(layers, biases, data, species_one_hot):\n  est = estimate_species(layers, biases, data)\n  loss = -1 * (jnp.log(est) * species_one_hot).sum()\n  return(loss)\n\ndef accuracy(est, species_index):\n  acc = sum(est.argmax(1) == species_index)/species_index.size\n  return(acc)\n\nestimate_grad = grad(estimate_loss, argnums = (0,1))\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nkey = random.PRNGKey(42)\n\n\nlayer_1 = random.uniform(key = subkeys[0], shape = (4,5))\nbiases_1 = random.uniform(key = subkeys[1], shape = (5,))\nlayer_2 = random.uniform(key = subkeys[2], shape = (5,5))\nbiases_2 = random.uniform(key = subkeys[3], shape = (5,))\nlayer_3 = random.uniform(key = subkeys[4], shape = (5,3))\nbiases_3 = random.uniform(key = subkeys[5], shape = (3,))\n\nepochs = 900\nlearning_rate = 0.001\ntrain_loss_list = []\ntest_loss_list = []\n\ntrain_acc_list = []\ntest_acc_list = []\n\n\nfor i in range(epochs):\n  est = estimate_species((layer_1, layer_2, layer_3),\n                         (biases_1, biases_2, biases_3),\n                          data_train)\n  train_loss = estimate_loss((layer_1, layer_2, layer_3),\n                       (biases_1, biases_2, biases_3),\n                       data_train, label_train)\n  train_loss_list.append(train_loss)\n  train_acc = accuracy(est, species_index_train)\n  train_acc_list.append(train_acc)\n  \n  test_est =  estimate_species((layer_1, layer_2, layer_3),\n                         (biases_1, biases_2, biases_3),\n                          data_test)\n  test_loss = estimate_loss((layer_1, layer_2, layer_3),\n                       (biases_1, biases_2, biases_3),\n                       data_test, label_test)\n  test_loss_list.append(test_loss)\n  test_acc = accuracy(test_est, species_index_test)\n  test_acc_list.append(test_acc)\n  \n  \n  gradient = estimate_grad((layer_1, layer_2, layer_3),\n                           (biases_1, biases_2, biases_3),\n                            data_train, label_train)\n  layer_1 += -(learning_rate * gradient[0][0])\n  layer_2 += -(learning_rate * gradient[0][1])\n  layer_3 += -(learning_rate * gradient[0][2])\n  biases_1 += -(learning_rate * gradient[1][0])\n  biases_2 += -(learning_rate * gradient[1][1])\n  biases_3 += -(learning_rate * gradient[1][2])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntrain_acc_arr = np.array(train_acc_list)\ntest_acc_arr = np.array(test_acc_list)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(py$train_acc_arr)\n```\n\n::: {.cell-output-display}\n![](01_gradient_descent_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntrain_loss_arr = np.array(train_loss_list)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npy$train_loss_arr[900:1000] * 0.001\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] NaN  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA\n [19]  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA\n [37]  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA\n [55]  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA\n [73]  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA\n [91]  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA\n```\n:::\n:::\n",
    "supporting": [
      "01_gradient_descent_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
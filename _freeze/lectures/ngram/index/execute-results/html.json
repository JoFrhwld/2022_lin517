{
  "hash": "0f387bc241e8da01206cf6dcb58cc043",
  "result": {
    "markdown": "---\ntitle: \"ngram Language Models\"\neditor: visual\nauthor:\n  - name: Josef Fruehwald\n    url: https://jofrhwld.github.io/\nknitr: \n  opts_chunk: \n    echo: false\n    message: false\nbibliography: references.bib\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nI'm going to split up the \"ngram model\" materials into explaining how they work in principle, vs the how we have to make engineering decisions to make them work in reality.\n\n## Language Prediction\n\nWhen we are perceiving language, we are constantly and in real-time making predictions about what we are about to hear next. While we're going to be talking about this in terms of predicting the next word, It's been shown that we do this even partway through a word [@allopenna1998].\n\nSo, let's say I spoke this much of a sentence to you:\n\n> I could tell he was angry from the tone of his\\_\\_\\_\n\nAnd then a sudden noise obscured the final word, and you only caught part of it. Which of the following three words was I *probably* trying to say?\n\na.  boys\nb.  choice\nc.  voice\n\nYour ability to guess which word it was is based on your i) experience with English turns of phrase and ii) the information in the context.\n\nOne goal of Language Models is to assign probabilities across the vocabulary for what the next word will be, and hopefully assign higher probabilities to the \"correct\" answer than the \"incorrect\" answer. Applications for this kind of prediction range from speech-to-text (which could suffer from a very similar circumstance as the fictional one above) to autocomplete or spellcheck.\n\n## Using context (ngrams)\n\nIn the example sentence above, one way we could go about trying to predict which word is most likely is to count up how many times the phrase \"I could tell he was angry from the tone of his\\_\\_\\_\" is finished by the candidate words. Here's a table of google hits for the three possible phrases, as well as all hits for just the context phrase.\n\n|   \"I could tell he was angry from the tone of his\" | count |\n|---------------------------------------------------:|------:|\n|                                               boys |     0 |\n|                                             choice |     0 |\n|                                              voice |     3 |\n| *\"I could tell he was angry from the tone of his\"* |     3 |\n\nWe're going to start diving into mathematical formulas now (fortunately the numbers are easy right now).\n\nTo represent the count of a word or string of words in a corpus. We'll use $C(\\text{word})$. So given the table above we have\n\n$$\n\\displaylines{C(\\text{I could tell he was angry from the tone of his})=3\\\\\nC(\\text{I could tell he was angry from the tone of his boys})=0\\\\\nC(\\text{I could tell he was angry from the tone of his choice})=0\\\\\nC(\\text{I could tell he was angry from the tone of his voice})=3}\n$$\n\nTo describe the probability that the next word is \"choice\" given that we've already heard \"I could tell he was angry from the tone of his\", we'll use the notation $P(\\text{choice} | \\text{I could tell he was angry from the tone of his})$. To *calculate* that probability, we'll divide the total count of the whole phrase by the count of the preceding context.\n\n$$\nP(\\text{choice} | \\text{I could tell he was angry from the tone of his}) = \\frac{C(\\text{I could tell he was angry by the tone of his choice})}{C(\\text{I could tell he was angry by the tone of his})} = \\frac{0}{3} = 0\n$$\n\nIn fact, we can estimate the probability of an entire sentence with the *Probability Chain Rule*. The probability of a sequence of events like $P(X_1X_2X_3)$ can be estimated by multiplying out their conditional probabilities like so:\n\n$$\nP(X_1X_2X_3) = P(X_1)P(X_2|X_1)P(X_3|X_1X_2)\n$$\n\nOr, to use a phrase as an example:[^1]\n\n[^1]: Credit here to Kyle Gorman for introducing me to this example.\n\n$$\nP(\\text{du hast mich gefragt})=P(\\text{du})P(\\text{hast}|\\text{du})P(\\text{mich}|\\text{du hast})P(\\text{gefragt}|\\text{du hast mich})\n$$\n\n### Data Sparsity rears its head\n\nThe problem with [data sparsity](../data_sparsity/data_sparsity.qmd) rears its head, though. As we can already see in the table above, long phrases, although *possible*, might not appear in any corpus, giving us a very unreliable probability estimate.\n\nInstead of using the *whole* history, we can use a smaller context in a more strictly defined window. So, instead of looking at the whole sentence, what if we looked at counts of just \"of his\" from the example sentence.\n\n| \"of his\" | count (in millions) |\n|---------:|--------------------:|\n|     boys |                 2.2 |\n|   choice |                14.2 |\n|    voice |                44.5 |\n| \"of his\" |             2,400.0 |\n\n$$\n\\displaylines{\nP(\\text{boys} | \\text{of his}) = \\frac{C(\\text{of his boys)}}{C(\\text{of his})}=\\frac{2.2}{2400} = 0.0009\\\\\nP({\\text{choice}|\\text{of his}})= \\frac{C(\\text{of his choice)}}{C(\\text{of his})}=\\frac{14.2}{2400} = 0.005\\\\\nP({\\text{voice}|\\text{of his}})= \\frac{C(\\text{of his voice)}}{C(\\text{of his})}=\\frac{44.5}{2400} = 0.018}\n$$\n\nThe continuation \"voice\" here is still *relatively* low probability, but has the highest probability of our candidate set.\n\nThis is the basic approach of an ngram model. Instead of using all available words to calculate the probability of the next word, we'll approximate it with a smaller window. The example in the table above is a \"trigram\" model.\n\n::: callout-note\n## \"gram\" names\n\nunigram:\n\n:   Counting up every individual (1) word, and try to estimate the probability of word in isolation.\n\nbigram:\n\n:   Count up every sequence of two words, and try to estimate the probability of a word given just one word before it,\n\ntrigram\n\n:   Count up every sequence of three words, and try to estimate the probability of a word given just the two words before it.\n\n\"Trigrams\" are the last n-gram with a special name. The rest are just called \"4-gram\" or \"5-gram\".\n:::\n\n\n::: {.cell}\n\n:::\n\n\n### Building up a bigram model\n\nLet's look at what happens as we gradually build up a bigram model we'll start with one sentence.\n\n    I saw the dog\n\n\n::: {.cell}\n\n:::\n\n```{dot}\n//| file: figure/1sent.dot\ndigraph {\nrankdir=LR;\n\tdog -> END [penwidth=6, label=1];\n\tI -> saw [penwidth=6, label=1];\n\tsaw -> the [penwidth=6, label=1];\n\tSTART -> I [penwidth=6, label=1];\n\tthe -> dog [penwidth=6, label=1];\n}\n```\n\n\n    I saw the dog\n    We saw a dog\n\n\n::: {.cell}\n\n:::\n\n```{dot}\n//| file: figure/2sent.dot\ndigraph {\nrankdir=LR;\n\ta -> dog [penwidth=6, label=1];\n\tdog -> END [penwidth=6, label=1];\n\tI -> saw [penwidth=6, label=1];\n\tsaw -> a [penwidth=3, label=0.5];\n\tsaw -> the [penwidth=3, label=0.5];\n\tSTART -> I [penwidth=3, label=0.5];\n\tSTART -> We [penwidth=3, label=0.5];\n\tthe -> dog [penwidth=6, label=1];\n\tWe -> saw [penwidth=6, label=1];\n}\n```\n\n\n    I saw the dog\n    We saw a dog\n    I read a book\n\n\n::: {.cell}\n\n:::\n\n```{dot}\n//| file: figure/3sent.dot\ndigraph {\nrankdir=LR;\n\ta -> book [penwidth=3, label=0.5];\n\ta -> dog [penwidth=3, label=0.5];\n\tbook -> END [penwidth=6, label=1];\n\tdog -> END [penwidth=6, label=1];\n\tI -> read [penwidth=3, label=0.5];\n\tI -> saw [penwidth=3, label=0.5];\n\tread -> a [penwidth=6, label=1];\n\tsaw -> a [penwidth=3, label=0.5];\n\tsaw -> the [penwidth=3, label=0.5];\n\tSTART -> I [penwidth=4, label=0.67];\n\tSTART -> We [penwidth=2, label=0.33];\n\tthe -> dog [penwidth=6, label=1];\n\tWe -> saw [penwidth=6, label=1];\n}\n```\n\n\n    I saw the dog\n    We saw a dog\n    I read a book\n    I saw a book\n    I saw a dog\n\n\n::: {.cell}\n\n:::\n\n\n::: {#fig-update .column-page layout-ncol=\"2\"}\n\n```{dot}\n//| fig-responsive: true\n//| file: figure/3sent.dot\n//| fig-caption: \"before update\"\ndigraph {\nrankdir=LR;\n\ta -> book [penwidth=3, label=0.5];\n\ta -> dog [penwidth=3, label=0.5];\n\tbook -> END [penwidth=6, label=1];\n\tdog -> END [penwidth=6, label=1];\n\tI -> read [penwidth=3, label=0.5];\n\tI -> saw [penwidth=3, label=0.5];\n\tread -> a [penwidth=6, label=1];\n\tsaw -> a [penwidth=3, label=0.5];\n\tsaw -> the [penwidth=3, label=0.5];\n\tSTART -> I [penwidth=4, label=0.67];\n\tSTART -> We [penwidth=2, label=0.33];\n\tthe -> dog [penwidth=6, label=1];\n\tWe -> saw [penwidth=6, label=1];\n}\n```\n\n```{dot}\n//| fig-responsive: true\n//| file: figure/5sent.dot\n//| fig-caption: \"After update\"\ndigraph {\nrankdir=LR;\n\ta -> book [penwidth=3, label=0.5];\n\ta -> dog [penwidth=3, label=0.5];\n\tbook -> END [penwidth=6, label=1];\n\tdog -> END [penwidth=6, label=1];\n\tI -> read [penwidth=1.5, label=0.25];\n\tI -> saw [penwidth=4.5, label=0.75];\n\tread -> a [penwidth=6, label=1];\n\tsaw -> a [penwidth=4.5, label=0.75];\n\tsaw -> the [penwidth=1.5, label=0.25];\n\tSTART -> I [penwidth=4.8, label=0.8];\n\tSTART -> We [penwidth=1.2, label=0.2];\n\tthe -> dog [penwidth=6, label=1];\n\tWe -> saw [penwidth=6, label=1];\n}\n```\n\n\nBefore and after update.\n:::\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nThe rectangle represents a matrix, with the y-axis representing \"from\" words and the x-axis representing \"to\" words in Frankenstein. There *could* be a point in any location in the rectangle, representing a time that word $w_n$ followed word $w_{n-1}$. Each point represents a cell in that matrix where *any* data was observed.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
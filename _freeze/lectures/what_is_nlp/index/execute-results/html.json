{
  "hash": "b6ae5021ee7b029a068e2c1a0319fc69",
  "result": {
    "markdown": "---\ntitle: \"What is NLP?<br>(for this course)\"\nauthor: \n  - name: Josef Fruehwald\n  - url: https://jofrhwld.github.io/\ndate: \"2022-8-24\"\nformat: html\nlicense: \"CC-BY-SA 4.0\"\neditor: visual\nknitr:\n  opts_chunk: \n    echo: false\n    warning: false\n    message: false\nbibliography: references.bib\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## NLP $\\in$ Computational Linguistics\n\n[In set notation, $\\in$ means \"is an element of\". That is, there's a large set of things called \"Computational Linguistics\", and NLP is a part of that larger set.]{.aside}\n\n\"Computational Linguistics\" covers a very broad range of topics. Natural Language Processing is currently an area of research and application that receives a lot of attention & money, but Computational Linguistics is a much broader umbrella term. The [Association for Computational Linguistics](https://www.aclweb.org/portal/) defines it as\n\n> *Computational linguistics* is the scientific study of language from a computational perspective. Computational linguists are interested in providing computational models of various kinds of linguistic phenomena. These models may be \"knowledge-based\" (\"hand-crafted\") or \"data-driven\" (\"statistical\" or \"empirical\"). Work in computational linguistics is in some cases motivated from a scientific perspective in that one is trying to provide a computational explanation for a particular linguistic or psycholinguistic phenomenon; and in other cases the motivation may be more purely technological in that one wants to provide a working component of a speech or natural language system. Indeed, the work of computational linguists is incorporated into many working systems today, including speech recognition systems, text-to-speech synthesizers, automated voice response systems, web search engines, text editors, language instruction materials, to name just a few.\n\n## Some examples of $\\{x | x \\in \\text{CL}~\\text{and}~x \\ne \\text{NLP}\\}$\n\n[This is set notation that means \"the set of things, such that each thing is in Computational Linguistics, and the thing is not Natural Language Processing]{.aside}\n\n### Formalizing Theory\n\nOne use of computational linguistics is to *formalize* linguistic theories into a computational framework. This might seem weird, since a lot of linguistic theory already looks very formal. But giving mathy looking definitions in a verbal description of a theory is a very different thing from implementing that theory in *code* that will *run*.\n\nSome examples are\n\n-   Minimalist Parsers [@minimali2019] implementing parsers for Minimalist Syntax\n-   The Gradual Learning Algorithm [@Boersma2001] implementing constraint re-ranking in Optimality Theory\n-   The Tolerance Principle [@yang2016], formalizing how learners might acquire rules that have exceptions.\n\nThe interesting thing with formalizing verbal theories, computationally, is that things that might seem like big differences in the verbal theories could turn out to be computationally identical, and some things that might not seem like a big difference can turn out to be massively different computationally.\n\n### Conceptual Experiments\n\nYou can use general computational principles to flesh out what you would expect to happen given under specific theories, or to use specific computational implementations of linguistic theory to explore their consequences.\n\nHere's a little example from dialectology. We have two proposed principles:\n\n-   Garde's Principle: Mergers are irreversible by linguistic means\n\n    -   *once a community gets merger, like the cot/caught merger, it cannot get back the distinction*\n\n-   Herzog's Corollary: Mergers expand at the expense of distinctions.\n\n    -   *once a community develops a merger, like the cot/caught merger, it will inevitably spread geographically to other communities*\n\nWe can translate these two principles into a \"finite state automaton\" below.\n\n\n```{dot}\ndigraph finite_state_machine {\n\tfontname=\"Helvetica,Arial,sans-serif\"\n\tnode [fontname=\"Roboto,Helvetica,Arial,sans-serif\"]\n\tedge [fontname=\"Roboto,Helvetica,Arial,sans-serif\"]\n\trankdir=LR;\n\tnode [shape = circle];\n\td [label=\"ɔ/ɑ distinction\"]\n\tm [label=\"ɔ/ɑ merger\"]\n\tinit [label=\"\", shape=point]\n\tinit -> d\n\td -> d [label = \"0.90\"]\n\td -> m [label = \"0.10\"]\n\tm -> m [label = \"0.99\"]\n\tm -> d [label = \"0.01\"]\n}\n```\n\n\nA verbal translation of this diagram would be\n\n> We start out in a state of distinguishing between /ɔ/ and /ɑ/. With each step in time (\"generation\"), we probably keep distinguishing between /ɔ/ and /ɑ/ with a 0.9 probability, but there's *some* chance we become a merged community. Once we become a merged community, we are overwhelmingly likely to remain a merged community with a 0.99 probability. But there is a very little probability that we might go back to being merged at 0.01 probability.\n\nUnder these circumstances, are we inevitably going to become a merged community? How long until we reach the maximum probability of becoming a merged community? We can answer these questions with a conceptual experiment, converting the description and diagram above into a transition probability matrix, and then just doing a bunch of matrix multiplications.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# python\nimport numpy as np\n\nd_change = np.array([0.90, 0.10])\nm_change = np.array([0.01, 0.99])\n\nchange_mat = np.row_stack((d_change, m_change))\nprint(change_mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[0.9  0.1 ]\n [0.01 0.99]]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# python\ninitial_state = np.array((1,0))\nn_generations = 100\ncollector = [initial_state]\n\ncurrent_state = initial_state\nfor i in range(n_generations):\n  new_state = current_state @ change_mat\n  collector.append(new_state)\n  current_state = new_state\n  \nresults_mat = np.row_stack(collector)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=768}\n:::\n:::\n\n\nLooks like with the probabilities set up this way, we're *not* guaranteed to become a merged community. The probability is very high (about 0.91), but not for certain. We might say, seeing this, that unless the Garde's Principle is absolute (it's *impossible* to undo a merger by any means) then Herzog's Corollary won't necessarily hold.\n\nOther examples of conceptual experiments are\n\n-   @Yang2000a used a model of variable grammar learning to see if he could predict which grammars (e.g. V2 vs no-V2) would win over time.\n\n-   @sneller2019 used the tolerance principle to see if a specific phonological change in Philadelphia could plausibly develop on its own, or if it had to be due to dialect contact.\n\n-   @linzen2021 used RNNs (a kind of neural network) to see if \"garden path\" sentences (e.g. \"The horse raced past the barn fell.\"[^1]) were difficult just because the word at the pivot point was especially unlikely.\n\n[^1]: c.f. \"The horse *that was* raced past the barn fell.\n\n### Agent Based Modelling\n\nThis doesn't always fall under the rubric of \"computational linguistics,\" but agent-based modelling involves programming virtual \"agents\" that then \"interact\" with each other. Part of what you program into the simulation is rules for how agents interact with each other, and what information they exchange or adopt when they do. It's often used to model the effect of social network structure.\n\n-   @deboer2001 models vowel system acquisition and development over time.\n\n-   @stanford2013 explore models of geographic spread of variation.\n\n-   @kauhanen2017 explores whether any linguistic variant needs to have an advantage over another in order to become the dominant form.\n\n### Building and using computational tools and data\n\nOf course, there is a massive amount of effort that goes into constructing linguistic corpora, and developing computational tools to analyze those corpora.\n\n## NLP\n\nFor this class, we'll be mostly focusing on the \"Language Modeling\" component of NLP, and we'll be following the definition of \"Language Model\" from @bender2020 as a model trained to predict what string or word is most likely in the context of other words. For example, from the following sentence, can you guess the missing word?\n\n-   I could tell he was mad from the tone of his \\[\\_\\_\\_\\_\\]\n\n### Using the predictions\n\nLanguage model predictions are really useful for many applications. For example, let's say you built an autocaptioning system that took audio and processed it into a transcription. You might have a situation where the following sentence gets transcribed.\n\n-   Poker and blackjack are both [{{< fa wave-square >}}]{style=\"color: #e63946\"} games people play at casinos.\n\nThe digital signal, [{{< fa wave-square >}}]{style=\"color: #e63946\"}, in this sentence is consistent with two possible words here\n\n-   car\n-   card\n\nUs humans here know that in the context of \"poker\", \"blackjack\", \"games\" and \"casinos\", the more likely word is \"card\", not \"car.\" But a simple model that's *just* processing acoustics doesn't know that. So to improve your captioning, you'd probably want to incorporate a language model that takes the context into account and boosts the probability of \"card\".\n\nThis is just one example, but there are many other kinds of string prediction tasks, such as:\n\n-   Given a string in language A, predict the string in language B (a.k.a. machine translation).\n\n-   Given a whole paragraph, predict a summary of the paragraph (summarization).\n\n-   Given a question, predict an answer (question answering).\n\n-   Given a prompt, continue the text in the same style (text generation).\n\n### Using the representations\n\nIn the process of training models to do text generation, they develop internal representations of strings of text that can be useful for *other* purposes. For example, a common NLP task is \"sentiment analysis,\" that could be used to analyze, say, reviews of products online.[^2]\n\n[^2]: or even... course evaluation survey responses 😱\n\nOne really *very* simplistic approach would be to get a dictionary of words that have been [scored for their \"positivity\" and \"negativity.\"](http://corpustext.com/reference/sentiment_afinn.html) Then, every one of those words or a tweet or what ever has one of those words in it, you add its score as a total sentiment score.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R\nlibrary(tidytext)\nset.seed(101)\nget_sentiments(\"afinn\") %>%\n  sample_n(10) %>%\n  kable()\n```\n\n::: {.cell-output-display}\n|word         | value|\n|:------------|-----:|\n|lobby        |    -2|\n|stricken     |    -2|\n|loser        |    -3|\n|jealous      |    -2|\n|breakthrough |     3|\n|inability    |    -2|\n|harshest     |    -2|\n|ranter       |    -3|\n|cried        |    -2|\n|warfare      |    -2|\n:::\n:::\n\n\nHere's an example with a notable tweet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R\ntweet <- \"IF THE ZOO BANS ME FOR HOLLERING AT THE ANIMALS I WILL FACE GOD AND WALK BACKWARDS INTO HELL\"\ntweet_df <- tibble(word = tweet %>%\n                     tolower() %>%\n                     str_split(\" \") %>%\n                     simplify()) %>%\n  left_join(get_sentiments(\"afinn\")) %>%\n  replace_na(replace = list(value = 0))\n```\n:::\n\n\n::: panel-tabset\n## full tweet\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R\ntweet_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 19 × 2\n   word      value\n   <chr>     <dbl>\n 1 if            0\n 2 the           0\n 3 zoo           0\n 4 bans          0\n 5 me            0\n 6 for           0\n 7 hollering     0\n 8 at            0\n 9 the           0\n10 animals       0\n11 i             0\n12 will          0\n13 face          0\n14 god           1\n15 and           0\n16 walk          0\n17 backwards     0\n18 into          0\n19 hell         -4\n```\n:::\n:::\n\n\n## sum\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R\ntweet_df %>%\n  summarise(sentiment = sum(value))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  sentiment\n      <dbl>\n1        -3\n```\n:::\n:::\n\n:::\n\nHowever, this is a kind of lackluster approach to sentiment analysis nowadays. Many language models now now, as a by product of their string prediction training, have more complex representations of words than just a score between -5 and 5, and have representations of whole strings that can be used (so it won't give the same score to \"good\" and \"not good\").\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# python\nfrom transformers import pipeline\n\n# warning, this will download approx\n# 1.3G of data.\nsentiment_analysis = pipeline(\"sentiment-analysis\",\n                              model=\"siebert/sentiment-roberta-large-english\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# python\nprint(sentiment_analysis(\"IF THE ZOO BANS ME FOR HOLLERING AT THE ANIMALS I WILL FACE GOD AND WALK BACKWARDS INTO HELL\"))\nprint(sentiment_analysis(\"This ain't bad!\"))\n```\n:::\n\n\n    [{'label': 'NEGATIVE', 'score': 0.9990140199661255}]\n    [{'label': 'POSITIVE', 'score': 0.9944340586662292}]\n\n## References\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}